#app.py

#!/usr/bin/env python3
from flask import Flask, request, jsonify
from kafka import KafkaProducer
import json
from datetime import datetime

app = Flask(__name__)

# Configure Kafka Producer with 500ms flush interval
producer = KafkaProducer(
    bootstrap_servers=['localhost:9092'],
    value_serializer=lambda x: json.dumps(x).encode('utf-8'),
    batch_size=16384,  # 16KB batch size
    linger_ms=500,     # 500ms flush interval
    acks='all'
)

@app.route('/emoji', methods=['POST'])
def receive_emoji():
    """
    Endpoint to receive emoji data and send to Kafka queue
    Expected JSON format:
    {
        "user_id": "user123",
        "emoji_type": "üòä",
        "timestamp": "2024-01-01T12:00:00"
    }
    """
    try:
        data = request.json
        
        # Validate required fields
        required_fields = ['user_id', 'emoji_type', 'timestamp']
        if not all(field in data for field in required_fields):
            return jsonify({"error": "Missing required fields"}), 400

        # Send to Kafka topic asynchronously
        future = producer.send('emoji_topic', value=data)
        
        # Optional: Wait for the message to be sent
        # future.get(timeout=2)
        
        return jsonify({
            "status": "success",
            "message": "Emoji data queued successfully"
        }), 200

    except Exception as e:
        return jsonify({
            "error": str(e),
            "message": "Failed to process emoji data"
        }), 500

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5012, debug=True)

#client_simulator.py

#!/usr/bin/env python3
import requests
import threading
import time
import random
import uuid
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor
import asyncio
import aiohttp
from collections import defaultdict

class EmojiClient:
    def __init__(self, client_id, api_url='http://localhost:5012/emoji'):
        self.client_id = client_id
        self.api_url = api_url
        self.emoji_types = ['üòä', 'üòÇ', '‚ù§Ô∏è', 'üëç', 'üéâ']
        self.running = True
        self.session = None
        self.rate_limit = 100  # Target 100 emojis per second per client
        self.batch_size = 50   # Increased batch size
        self.concurrent_batches = 4  # Number of concurrent batch sends
        self.emoji_counts = defaultdict(int)
        self.current_second = int(time.time())
        
    def generate_emoji_data(self):
        """Generate random emoji data"""
        return {
            "user_id": str(uuid.uuid4()),
            "emoji_type": random.choice(self.emoji_types),
            "timestamp": datetime.now().isoformat()
        }

    def update_counts(self, count=1):
        """Update emoji counts for the current second"""
        current_time = int(time.time())
        if current_time != self.current_second:
            self.emoji_counts.clear()
            self.current_second = current_time
        self.emoji_counts[self.current_second] += count

    async def init_session(self):
        """Initialize aiohttp session with optimal settings"""
        if not self.session:
            conn = aiohttp.TCPConnector(limit=0)  # Remove connection limit
            timeout = aiohttp.ClientTimeout(total=2)
            self.session = aiohttp.ClientSession(
                connector=conn,
                timeout=timeout
            )

    async def send_emoji_batch(self):
        """Send a batch of emoji requests concurrently"""
        if not self.session:
            await self.init_session()
            
        emoji_data_batch = [self.generate_emoji_data() for _ in range(self.batch_size)]
        tasks = []
        
        for data in emoji_data_batch:
            tasks.append(self.session.post(self.api_url, json=data))
            
        try:
            responses = await asyncio.gather(*tasks, return_exceptions=True)
            success_count = sum(1 for r in responses if isinstance(r, aiohttp.ClientResponse) and r.status == 200)
            self.update_counts(success_count)
        except Exception as e:
            print(f"Batch error for client {self.client_id}: {str(e)}")

    async def run_client_async(self):
        """Run continuous stream of emoji sends with optimized rate limiting"""
        while self.running:
            try:
                start_time = time.time()
                
                # Send multiple batches concurrently
                batch_tasks = [self.send_emoji_batch() for _ in range(self.concurrent_batches)]
                await asyncio.gather(*batch_tasks)
                
                # Minimal delay to prevent overloading
                elapsed = time.time() - start_time
                if elapsed < 0.25:  # Adjusted delay
                    await asyncio.sleep(0.25 - elapsed)
                    
            except Exception as e:
                print(f"Client {self.client_id} error: {e}")
                await asyncio.sleep(0.1)

    def get_current_rate(self):
        """Get the current emission rate for this client"""
        return self.emoji_counts.get(self.current_second, 0)

    async def cleanup(self):
        """Cleanup resources"""
        if self.session:
            await self.session.close()

class EmojiClientManager:
    def __init__(self, num_clients=10):
        self.num_clients = num_clients
        self.clients = []
        self.loop = asyncio.new_event_loop()
        asyncio.set_event_loop(self.loop)
        self.display_task = None

    async def display_metrics(self):
        """Display metrics for all clients periodically"""
        prev_total = 0
        while True:
            current_time = int(time.time())
            print("\033[2J\033[H")  # Clear screen
            print(f"Emoji Client Metrics - {datetime.fromtimestamp(current_time).strftime('%Y-%m-%d %H:%M:%S')}")
            print("-" * 70)
            print("Client ID | Emojis/sec | Total Emojis | Rate Achievement % | Delta")
            print("-" * 70)
            
            total_current_rate = 0
            total_emojis = 0
            
            for client in self.clients:
                current_rate = client.get_current_rate()
                total_emojis_client = sum(client.emoji_counts.values())
                rate_achievement = (current_rate / client.rate_limit) * 100
                
                total_current_rate += current_rate
                total_emojis += total_emojis_client
                
                print(f"Client {client.client_id:2d} | {current_rate:10d} | {total_emojis_client:12d} | "
                      f"{rate_achievement:6.1f}% | {current_rate - client.rate_limit:+5d}")
            
            print("-" * 70)
            total_target = self.num_clients * 100
            total_achievement = (total_current_rate / total_target) * 100
            delta = total_current_rate - prev_total
            print(f"Total     | {total_current_rate:10d} | {total_emojis:12d} | "
                  f"{total_achievement:6.1f}% | {delta:+5d}")
            print("-" * 70)
            
            prev_total = total_current_rate
            await asyncio.sleep(1)

    async def start_clients(self):
        """Start all clients and metrics display"""
        self.clients = [EmojiClient(i) for i in range(self.num_clients)]
        self.display_task = asyncio.create_task(self.display_metrics())
        client_tasks = [client.run_client_async() for client in self.clients]
        await asyncio.gather(*client_tasks)

    async def stop_clients(self):
        """Stop all clients and metrics display"""
        if self.display_task:
            self.display_task.cancel()
            try:
                await self.display_task
            except asyncio.CancelledError:
                pass
        
        for client in self.clients:
            client.running = False
            await client.cleanup()

    def run(self):
        """Run the client manager"""
        try:
            self.loop.run_until_complete(self.start_clients())
        except KeyboardInterrupt:
            print("\nStopping clients...")
            self.loop.run_until_complete(self.stop_clients())
        finally:
            self.loop.close()

if __name__ == "__main__":
    print("Starting emoji clients...")
    manager = EmojiClientManager(num_clients=4)
    manager.run()

#spark_streaming_consumer.py

#!/usr/bin/env python3
import os
import tempfile
from pyspark.sql import SparkSession
from pyspark.sql.functions import (
    from_json, col, window, count, expr, to_timestamp, lit
)
from pyspark.sql.types import (
    StructType, StructField, StringType, TimestampType
)

def ensure_directories():
    """Create necessary directories with appropriate permissions"""
    directories = [
        '/tmp/spark-events',
        '/tmp/spark-temp',
        '/tmp/checkpoint',
        '/tmp/spark-warehouse'
    ]
    
    for directory in directories:
        if not os.path.exists(directory):
            try:
                os.makedirs(directory, mode=0o777, exist_ok=True)
            except Exception as e:
                print(f"Warning: Could not create {directory}: {e}")
                
    # Set environment variable for temporary directory
    os.environ['TMPDIR'] = '/tmp/spark-temp'
    tempfile.tempdir = '/tmp/spark-temp'

def create_spark_session():
    """Create and configure Spark session with optimized settings"""
    # Ensure directories exist
    ensure_directories()
    
    return SparkSession.builder \
        .appName("EmojiProcessor") \
        .config("spark.streaming.stopGracefullyOnShutdown", "true") \
        .config("spark.streaming.kafka.maxRatePerPartition", "10000") \
        .config("spark.sql.shuffle.partitions", "4") \
        .config("spark.default.parallelism", "4") \
        .config("spark.streaming.backpressure.enabled", "true") \
        .config("spark.streaming.kafka.consumer.cache.enabled", "true") \
        .config("spark.executor.memory", "1g") \
        .config("spark.executor.cores", "2") \
        .config("spark.driver.memory", "1g") \
        .config("spark.local.dir", "/tmp/spark-temp") \
        .config("spark.eventLog.enabled", "true") \
        .config("spark.eventLog.dir", "/tmp/spark-events") \
        .config("spark.sql.warehouse.dir", "/tmp/spark-warehouse") \
        .config("spark.sql.streaming.stateStore.providerClass", 
                "org.apache.spark.sql.execution.streaming.state.HDFSBackedStateStoreProvider") \
        .config("spark.jars.packages", "org.apache.spark:spark-sql-kafka-0-10_2.12:3.1.2") \
        .master("local[*]") \
        .getOrCreate()

def define_schema():
    """Define schema for emoji data"""
    return StructType([
        StructField("user_id", StringType(), True),
        StructField("emoji_type", StringType(), True),
        StructField("timestamp", StringType(), True)
    ])

def process_emoji_stream(aggregation_ratio=1000):
    """
    Process streaming emoji data from Kafka
    
    Args:
        aggregation_ratio (int): Number of raw emoji counts to aggregate into one scaled count
    """
    spark = create_spark_session()
    spark.sparkContext.setLogLevel("WARN")
    schema = define_schema()

    # Read from Kafka with optimized options
    kafka_df = spark \
        .readStream \
        .format("kafka") \
        .option("kafka.bootstrap.servers", "localhost:9092") \
        .option("subscribe", "emoji_topic") \
        .option("startingOffsets", "latest") \
        .option("failOnDataLoss", "false") \
        .option("maxOffsetsPerTrigger", "10000") \
        .option("fetchOffset.numRetries", "3") \
        .load()

    # Parse JSON and timestamp
    parsed_df = kafka_df \
        .select(from_json(col("value").cast("string"), schema).alias("data")) \
        .select(
            "data.user_id",
            "data.emoji_type",
            to_timestamp("data.timestamp").alias("event_time")
        )

    # Process in 2-second windows with emoji aggregation
    windowed_counts = parsed_df \
        .withWatermark("event_time", "10 seconds") \
        .groupBy(
            window("event_time", "2 seconds", "2 seconds"),
            "emoji_type"
        ) \
        .agg(count("*").alias("raw_count")) \
        .select(
            "window.start",
            "window.end",
            "emoji_type",
            "raw_count",
            expr(f"CEIL(raw_count / {aggregation_ratio})").alias("scaled_count"),
            lit(aggregation_ratio).alias("aggregation_ratio")
        )

    # Output stream to console
    query = windowed_counts \
        .writeStream \
        .outputMode("update") \
        .format("console") \
        .option("truncate", "false") \
        .option("numRows", 100) \
        .trigger(processingTime="2 seconds") \
        .option("checkpointLocation", "/tmp/checkpoint") \
        .start()

    query.awaitTermination()

if __name__ == "__main__":
    print("Starting Spark Streaming consumer...")
    try:
        process_emoji_stream(aggregation_ratio=1000)
    except KeyboardInterrupt:
        print("\nStopping Spark Streaming consumer...")
    except Exception as e:
        print(f"Error: {str(e)}")


#spark_connector.py

#!/usr/bin/env python3
from kafka import KafkaConsumer
import json
from main_publisher import MainPublisher
import threading

class SparkConnector:
    def __init__(self, bootstrap_servers=['localhost:9092']):
        self.consumer = KafkaConsumer(
            'emoji_topic',  # Topic where Spark writes aggregated data
            bootstrap_servers=bootstrap_servers,
            value_deserializer=lambda x: json.loads(x.decode('utf-8')),
            auto_offset_reset='latest'
        )
        self.main_publisher = MainPublisher(bootstrap_servers)
        
    def start(self):
        self.consumer_thread = threading.Thread(target=self._consume_messages)
        self.consumer_thread.daemon = True
        self.consumer_thread.start()
        
    def _consume_messages(self):
        for message in self.consumer:
            # Forward aggregated emoji data to main_emoji_topic
            self.main_publisher.publish_message('main_emoji_topic', message.value)


#run_spark_connector.py
#!/usr/bin/env python3
from spark_connector import SparkConnector
import time

def main():
    connector = SparkConnector()
    connector.start()
    
    print("Spark Connector started. Press Ctrl+C to exit.")
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nShutting down Spark Connector...")

if __name__ == "__main__":
    main()

#main_publisher.py

#!/usr/bin/env python3
from kafka import KafkaProducer
import json
class MainPublisher:
    def init(self, bootstrap_servers=['localhost:9092']):
        self.producer = KafkaProducer(
            bootstrap_servers=bootstrap_servers,
            value_serializer=lambda v: json.dumps(v).encode('utf-8')
        )

    def publish_message(self, topic, message):
        """
        Publishes aggregated emoji data to specified topic
        message format: {
            'start': timestamp,
            'end': timestamp,
            'emoji_type': str,
            'scaled_count': int,
            'aggregation_ratio': int
        }
        """
        self.producer.send(topic, message)
        self.producer.flush()


#run_main_publisher.py

#!/usr/bin/env python3
from main_publisher import MainPublisher
import time

def main():
    publisher = MainPublisher()
    print("Main Publisher started. Press Ctrl+C to exit.")
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nShutting down Main Publisher...")

if __name__ == "__main__":
    main()

#cluster_publisher.py

#!/usr/bin/env python3
from kafka import KafkaConsumer, KafkaProducer
import json
import threading
import redis

class ClusterPublisher:
    def __init__(self, cluster_id, bootstrap_servers=['localhost:9092'], redis_host='localhost', redis_port=6379):
        self.cluster_id = cluster_id
        self.redis_client = redis.StrictRedis(host=redis_host, port=redis_port, decode_responses=True)
        self.consumer = KafkaConsumer(
            'main_emoji_topic',
            bootstrap_servers=bootstrap_servers,
            value_deserializer=lambda x: json.loads(x.decode('utf-8'))
        )
        self.producer = KafkaProducer(
            bootstrap_servers=bootstrap_servers,
            value_serializer=lambda v: json.dumps(v).encode('utf-8')
        )
        
    def start(self):
        self.consumer_thread = threading.Thread(target=self._consume_messages)
        self.consumer_thread.daemon = True
        self.consumer_thread.start()
        
    def _consume_messages(self):
        for message in self.consumer:
            subscriber_topic = f"cluster_{self.cluster_id}_emoji"
            self.producer.send(subscriber_topic, message.value)
            self.producer.flush()

    def register_subscriber(self, subscriber_id):
        """Register a new subscriber in Redis."""
        key = f"cluster_{self.cluster_id}_subscribers"
        self.redis_client.hset(key, subscriber_id, 0)  # Initialize with zero clients

    def unregister_subscriber(self, subscriber_id):
        """Unregister a subscriber from Redis."""
        key = f"cluster_{self.cluster_id}_subscribers"
        self.redis_client.hdel(key, subscriber_id)

    def assign_client_to_subscriber(self):
        """Assign clients to the least-loaded subscriber."""
        key = f"cluster_{self.cluster_id}_subscribers"
        subscribers = self.redis_client.hgetall(key)
        if not subscribers:
            return None  # No subscribers available
        # Find the subscriber with the least load
        least_loaded = min(subscribers, key=subscribers.get)
        self.redis_client.hincrby(key, least_loaded, 1)
        return least_loaded

    def release_client_from_subscriber(self, subscriber_id):
        """Decrement the client count for a subscriber."""
        key = f"cluster_{self.cluster_id}_subscribers"
        if self.redis_client.hexists(key, subscriber_id):
            self.redis_client.hincrby(key, subscriber_id, -1)


#run_cluster.py

#!/usr/bin/env python3
from cluster_publisher import ClusterPublisher
import sys

def main():
    if len(sys.argv) != 2:
        print("Usage: python run_cluster.py <cluster_id>")
        sys.exit(1)
        
    cluster_id = sys.argv[1]
    cluster = ClusterPublisher(cluster_id)
    cluster.start()
    
    print(f"Cluster {cluster_id} is running. Press Ctrl+C to exit.")
    try:
        # Keep the main thread alive
        while True:
            pass
    except KeyboardInterrupt:
        print(f"\nShutting down cluster {cluster_id}...")

if __name__ == "__main__":
    main()



#subscriber.py

import hashlib
from flask import Flask, request, jsonify
from kafka import KafkaConsumer
import json
import threading
import socket
import sys
from werkzeug.serving import make_server

class Subscriber:
    def __init__(self, subscriber_id, cluster_id, bootstrap_servers=['localhost:9092']):
        self.subscriber_id = subscriber_id
        self.cluster_id = cluster_id
        self.clients = {}
        self.consumer = KafkaConsumer(
            f'cluster_{cluster_id}_emoji',
            bootstrap_servers=bootstrap_servers,
            value_deserializer=lambda x: json.loads(x.decode('utf-8')),
            auto_offset_reset='latest'
        )
        self.app = Flask(__name__)
        self.server = None
        self.http_server = None

    def _get_unique_port(self, start_port=5000, max_attempts=100):
        """Find an available port starting from start_port"""
        for port in range(start_port, start_port + max_attempts):
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.bind(('localhost', port))
                    return port
            except OSError:
                continue
        raise RuntimeError("Could not find an available port")

    def start(self):
        # Start the consumer thread
        self.consumer_thread = threading.Thread(target=self._consume_messages)
        self.consumer_thread.daemon = True
        self.consumer_thread.start()

        # Set up Flask routes
        self._setup_routes()

        # Find an available port
        try:
            port = self._get_unique_port()
            print(f"Starting subscriber on port {port}")
            
            # Create a werkzeug server instead of using app.run()
            self.http_server = make_server('0.0.0.0', port, self.app)
            server_thread = threading.Thread(target=self.http_server.serve_forever)
            server_thread.daemon = True
            server_thread.start()
            
            print(f"Subscriber {self.subscriber_id} running on port {port}")
            return port
            
        except RuntimeError as e:
            print(f"Error starting subscriber: {e}")
            sys.exit(1)

    def stop(self):
        """Cleanup method to stop the subscriber"""
        if self.http_server:
            print("Shutting down HTTP server...")
            self.http_server.shutdown()
        print("Subscriber stopped")

    def _consume_messages(self):
        """Consume Kafka messages and broadcast to registered clients."""
        try:
            for message in self.consumer:
                self._broadcast_to_clients(message.value)
        except Exception as e:
            print(f"Error in consumer thread: {e}")

    def _broadcast_to_clients(self, message):
        """Send messages to all registered clients."""
        message_str = json.dumps(message) + '\n'
        message_bytes = message_str.encode('utf-8')
        
        # Create a copy of clients dict to avoid runtime modification issues
        clients_copy = self.clients.copy()
        
        for client_id, client_info in clients_copy.items():
            client_host, client_port = client_info
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.settimeout(5)  # 5 second timeout
                    s.connect((client_host, client_port))
                    s.sendall(message_bytes)
            except Exception as e:
                print(f"Error sending to client {client_id} at {client_host}:{client_port}: {e}")
                self.clients.pop(client_id, None)  # Remove disconnected client

    def _setup_routes(self):
        @self.app.route('/register', methods=['POST'])
        def register():
            try:
                data = request.get_json()
                client_id = data.get('client_id')
                client_host = data.get('host', 'localhost')
                client_port = data.get('port')

                if not client_id or not client_port:
                    return jsonify({'error': 'Client ID and port are required'}), 400

                # Register the client
                self.clients[client_id] = (client_host, int(client_port))
                print(f"Client {client_id} registered with {client_host}:{client_port}")
                return jsonify({
                    'message': f'Client {client_id} registered successfully.',
                    'subscriber_id': self.subscriber_id,
                    'cluster_id': self.cluster_id
                }), 200
            except Exception as e:
                return jsonify({'error': f'Registration failed: {str(e)}'}), 500



#run_subscriber.py

#!/usr/bin/env python3
from subscriber import Subscriber
import sys
import signal
import time

def signal_handler(signum, frame):
    """Handle cleanup on signal"""
    print("\nReceived shutdown signal...")
    if 'subscriber' in globals():
        subscriber.stop()
    sys.exit(0)

def main():
    if len(sys.argv) != 3:
        print("Usage: python run_subscriber.py <subscriber_id> <cluster_id>")
        sys.exit(1)

    subscriber_id = sys.argv[1]
    cluster_id = sys.argv[2]

    # Set up signal handlers
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    try:
        global subscriber
        subscriber = Subscriber(subscriber_id, cluster_id)
        port = subscriber.start()
        
        print(f"Subscriber {subscriber_id} started in cluster {cluster_id} on port {port}")
        print("Press Ctrl+C to stop the subscriber")
        
        # Keep the main thread alive
        while True:
            time.sleep(1)
            
    except Exception as e:
        print(f"Error running subscriber: {e}")
        if 'subscriber' in globals():
            subscriber.stop()
        sys.exit(1)

if __name__ == "__main__":
    main()


#client.py

import requests
import socket
import threading
import json
import time

class EmojiClient:
    def __init__(self, client_id, subscriber_host, subscriber_port, client_port):
        self.client_id = client_id
        self.subscriber_host = subscriber_host
        self.subscriber_port = subscriber_port
        self.client_port = client_port
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.running = True
        self.connected_to_subscriber = False

    def register_with_subscriber(self):
        registration_url = f"http://{self.subscriber_host}:{self.subscriber_port}/register"
        payload = {
            "client_id": self.client_id,
            "host": "localhost",  # Using localhost for local testing
            "port": self.client_port
        }
        
        max_retries = 3
        retry_count = 0
        
        while retry_count < max_retries and not self.connected_to_subscriber:
            try:
                response = requests.post(registration_url, json=payload)
                if response.status_code == 200:
                    print(f"Successfully registered with Subscriber {self.subscriber_host}:{self.subscriber_port}")
                    self.connected_to_subscriber = True
                else:
                    print(f"Registration failed: {response.text}")
                    retry_count += 1
                    time.sleep(2)  # Wait before retrying
            except Exception as e:
                print(f"Error registering with subscriber: {e}")
                retry_count += 1
                time.sleep(2)  # Wait before retrying
        
        if not self.connected_to_subscriber:
            raise ConnectionError("Failed to register with subscriber after maximum retries")

    def start_receiving(self):
        try:
            self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            self.socket.bind(('0.0.0.0', self.client_port))
            self.socket.listen(5)
            print(f"Client listening on port {self.client_port}")
            self.receiver_thread = threading.Thread(target=self._accept_connections, daemon=True)
            self.receiver_thread.start()
        except Exception as e:
            print(f"Error starting receiver: {e}")
            self.close()
            raise

    def _accept_connections(self):
        while self.running:
            try:
                conn, addr = self.socket.accept()
                print(f"Accepted connection from {addr}")
                threading.Thread(target=self._receive_messages, args=(conn,), daemon=True).start()
            except Exception as e:
                if self.running:  # Only print error if we're still supposed to be running
                    print(f"Error accepting connection: {e}")

    def _receive_messages(self, conn):
        buffer = ""
        while self.running:
            try:
                data = conn.recv(4096).decode('utf-8')
                if not data:
                    break
                buffer += data
                while '\n' in buffer:
                    line, buffer = buffer.split('\n', 1)
                    message = json.loads(line)
                    self._display_emoji(message)
            except json.JSONDecodeError as e:
                print(f"Error decoding message: {e}")
            except Exception as e:
                print(f"Error receiving message: {e}")
                break
        conn.close()

    def _display_emoji(self, message):
        print(f"Received Emoji Update: {message}")

    def send_emoji(self, emoji):
        """Send emoji to the subscriber (Note: This is just for testing, actual emoji sending happens in client_simulator.py)"""
        try:
            print(f"Emoji '{emoji}' sent to subscriber")
        except Exception as e:
            print(f"Error sending emoji: {e}")

    def close(self):
        """Cleanup method to properly close the client"""
        print("Closing client connection...")
        self.running = False
        try:
            self.socket.shutdown(socket.SHUT_RDWR)
        except:
            pass  # Socket might already be closed
        self.socket.close()
        print("Client connection closed")



#run_client.py




#!/usr/bin/env python3
from client import EmojiClient
import time
import sys

def main():
    try:
        # Provide the necessary arguments for EmojiClient
        client_id = input("Enter client ID: ")  # e.g., "client1"
        subscriber_host = "localhost"  # The host of the subscriber
        
        while True:
            try:
                subscriber_port = int(input("Enter subscriber port: "))  # e.g., 5001
                client_port = int(input("Enter client port: "))  # e.g., 6000
                break
            except ValueError:
                print("Please enter valid port numbers")
        
        # Initialize the EmojiClient with the provided arguments
        client = EmojiClient(client_id, subscriber_host, subscriber_port, client_port)
        
        # Start the client
        try:
            # Start receiving messages from the subscriber
            client.start_receiving()
            
            # Register with the subscriber
            client.register_with_subscriber()
            
            print(f"Client {client_id} started. Enter emojis to send (press Ctrl+C to exit)")
            
            # Main input loop
            while True:
                emoji = input("Enter an emoji: ")
                if emoji.strip():  # Only send non-empty emojis
                    client.send_emoji(emoji)
                
        except ConnectionError as e:
            print(f"Connection error: {e}")
        except Exception as e:
            print(f"Error during client operation: {e}")
        
    except KeyboardInterrupt:
        print("\nShutting down client...")
    except Exception as e:
        print(f"Unexpected error: {e}")
    finally:
        if 'client' in locals():
            client.close()

if __name__ == "__main__":
    main()
